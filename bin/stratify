#!/usr/bin/env bb
;; -*- clojure -*-
;; vim: set filetype=clojure:
(ns stratify
  (:require
   [babashka.fs :as fs]
   [babashka.process :refer [process]]
   [clojure.string :as str]))

(defn- needs-scip-deps? [args]
  (some (fn [[arg1 arg2]]
          (and (or (= arg1 "-f") (= arg1 "--from"))
               (str/includes? arg2 "scip")))
        (partition 2 1 args)))

(defn get-base-deps [project-path args]
  (cond-> {'org.clojure/clojure {:mvn/version "1.12.0"}
           'io.github.dundalek/stratify {:local/root (str project-path)}}
    ;; Preload scip dependencies upfront, because lazy loading using add-libs does not work with protobuf classes
    (needs-scip-deps? args)
    (assoc 'stratify/scip {:local/root (str project-path "/resources/io/github/dundalek/stratify/optional-deps/scip")})))

(defn -main [& args]
  (let [project-path (-> (fs/real-path *file*) fs/parent fs/parent)
        deps-map (get-base-deps project-path args)
        ;; Specifying deps via alias and :replace-deps to prevent fetching deps from deps.edn of the analyzed project
        deps {:aliases
              {:stratify-bin
               {:replace-deps deps-map}}}
        proc (apply process {:inherit true}
                    "clojure" "-Sdeps" (pr-str deps)
                    "-M:stratify-bin" "-m" "stratify.main" args)]
    (System/exit (:exit @proc))))

(when (= *file* (System/getProperty "babashka.file"))
  (apply -main *command-line-args*))
